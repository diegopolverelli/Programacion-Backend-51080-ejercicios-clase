{
	// Place your GLOBAL snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	},

	"importaciones bÃ¡sicas": {
		"prefix": "impbas",
		"body": [
			"const express=require('express');",
			"const fs=require('fs');",
			"const multer=require('multer');"
		],
		"description": "Realiza el require de express, multer, y fs"
	},

	"Cascaron Servidor Express con Require": {
		"prefix": "server",
		"body": [
			// "console.log('$1');",
			// "$2"
			"const express=require('express');",
			"const PORT=3000;",
			"",
			
			"const app=express();",
			"",

			"app.use(express.json());",
			"app.use(express.urlencoded({extended:true}));",
			
			"",

			"app.get('/',(req,res)=>{",
			"\tres.setHeader('Content-Type','text/plain');",
			"\tres.status(200).send('OK');",
			"})",
			
			"",

			"const server=app.listen(PORT,()=>{",
			"\tconsole.log(`Server escuchando en puerto ${PORT}`);",
			"});",
			
			"",

			"server.on('error',(error)=>console.log(error));",
			
		],
		"description": "cascaron Servidor Express"
	},

	"Cascaron Servidor Express con Import": {
		"prefix": "serverImport",
		"body": [
			// "console.log('$1');",
			// "$2"
			"import express from 'express';",
			"const PORT=3000;",
			"",
			
			"const app=express();",
			"",

			"app.use(express.json());",
			"app.use(express.urlencoded({extended:true}));",
			
			"",

			"app.get('/',(req,res)=>{",
			"\tres.setHeader('Content-Type','text/plain');",
			"\tres.status(200).send('OK');",
			"})",
			
			"",

			"const server=app.listen(PORT,()=>{",
			"\tconsole.log(`Server escuchando en puerto ${PORT}`);",
			"});",
			
			"",

			"server.on('error',(error)=>console.log(error));",
			
		],
		"description": "cascaron Servidor Express"
	},


	"Endpoint get": {
		"prefix": "getendpoint",
		"body": [
			"app.get('/$1',(req,res)=>{",
			"\t$2",
			"\tres.setHeader('Content-Type','application/json');",
			"\tres.status(200).json({",
			"\t$3",
			"\t});",
			"});"
		],
		"description": "Endpoint Get"
	},
	
	"Endpoint varios": {
		"prefix": "endpoint",
		"body": [
			"app.$1('/$2',(req,res)=>{",
			"\t$3",
			"\tres.setHeader('Content-Type','application/json');",
			"\tres.status(200).json({",
			"\t$4",
			"\t});",
			"});"
		],
		"description": "Endpoint varios"
	},

	"Cascaron Servidor Express / Handlebars con Require": {
		"prefix": "serverCompleto",
		"body": [
			"const path=require('path');",
			"const express=require('express');",
			"const engine=require('express-handlebars').engine",
			"",
			
			"const PORT=3000;",
			"",

			"const app=express();",
			"",
			
			"app.engine('handlebars', engine());",
			"app.set('view engine', 'handlebars');",
			"app.set('views', path.join(__dirname,'./views'));",

			"",
			

			"app.use(express.json());",
			"app.use(express.urlencoded({extended:true}));",
			
			"",
			"app.use(express.static(path.join(__dirname,'./public')));",
			"",

			"app.get('/',(req,res)=>{",
			"\tres.setHeader('Content-Type','text/plain');",
			"\tres.status(200).send('OK');",
			"})",
			
			"",
			"app.get('/',(req,res)=>{",
			"\tres.setHeader('Content-Type','text/html');",
			"\tres.status(200).render('home');",
			"})",
			
			"",

			"const server=app.listen(PORT,()=>{",
			"\tconsole.log(`Server escuchando en puerto ${PORT}`);",
			"});",
			
			"",

			"server.on('error',(error)=>console.log(error));",
			
		],
		"description": "cascaron Servidor Express"
	},



}