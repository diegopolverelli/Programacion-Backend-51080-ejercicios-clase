// Strings de conexión a DB:
// mongoose.connect('mongodb://127.0.0.1:27017/pruebas_mongo',{
// mongoose.connect('mongodb+srv://coderhouse:coderhouse@cluster0.wpxpupc.mongodb.net/?retryWrites=true&w=majority&dbName=pruebas_mongo2',{
mongoose.connect('mongodb+srv://diepol:CoderCoderCoder@cluster0.4oxwh3e.mongodb.net/?retryWrites=true&w=majority&dbName=pruebas_Coder',{
},(err)=>{
    if(err){
        console.log(`Error de conexión a la base de datos :( ${err}`)
    }else{
        console.log(`Conexión a DB establecida...!!!`)
    }
})


// especificar colección en el esquema:
const usuariosEsquema= new Schema({
    nombre: String,
    apellido: String,
    codigo: Number,

},{collection:'usuariosBig'});



// Configurar express-handlebars para que tome lectura de Atlas
app.engine('handlebars', engine({
    runtimeOptions: {
        allowProtoPropertiesByDefault: true,
        allowProtoMethodsByDefault: true,
    },
}));


// estilos para la paginación
    <style>
        h1{
            color: #222;
        }
        ul{
            margin-bottom: 40px;
        }
        li{
            color:#333
        }
        a{
            padding:15px;
            border:1px solid #777;
            border-radius: 5px;
            background-color: #ccc;
            color: #333
        }
    </style>


let alumno=await alumnoModelo.find()
        .populate({
            path:'cursando.curso',
            populate:{
                path:'titular.profesor'
            }
        })


alumnoEsq.pre('find',function(){
    // this.populate('cursando.curso')
    this.populate({
        path:'cursando.curso',
        populate:{
            path:'titular.profesor'
        }
    })
})

